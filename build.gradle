import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "java"
apply plugin: "war"

apply from: "generate-schema.gradle"
apply from: "flyway.gradle"

group = "org.emamotor.morecat"
project.ext {
  artifactId = "morecat"
}
version = "0.2.0"

war.archiveName = "morecat.war"

sourceCompatibility = targetCompatibility = 1.8

ext {
  wildflyVersion = "8.1.0.Final"
  hibernateVersion = "4.3.5.Final"
  arquillianVersion = "1.1.5.Final"
  expectedGradleVersion = "2.1"
  defaultEnvironment = "development"
  environment = defaultEnvironment
}

tasks.withType(AbstractCompile) each {
  it.options.encoding = "UTF-8"
}

repositories {
  maven { url "https://repository.jboss.org/nexus/content/groups/public-jboss" }
  maven { url "https://repository.jboss.org/nexus/content/repositories" }
  maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases" }
  maven { url "http://repository.jboss.org/nexus/content/groups/public" }
  maven { url "http://repository.jboss.org/nexus/content/repositories/deprecated" }
  maven { url "http://repository.primefaces.org" }
  maven { url "http://repo.jfrog.org/artifactory/repo" }
  mavenCentral()
}

configurations {
  apt {
    description "for annotation processors"
  }

  provided
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime

}

dependencies {
  providedCompile "org.wildfly:wildfly-spec-api:$wildflyVersion"
  providedCompile "org.hibernate:hibernate-core:$hibernateVersion"
  apt "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
  providedCompile "org.hibernate:hibernate-validator:5.1.1.Final"
  providedCompile "org.projectlombok:lombok:1.14.2"

  compile "org.apache.commons:commons-lang3:3.3.2"
  compile "am.ik.marked4j:marked4j:0.9.1"
  compile "org.slf4j:slf4j-api:1.7.7"
  compile "ch.qos.logback:logback-classic:1.1.2"
  compile "org.primefaces:primefaces:4.0"
  compile "org.primefaces.themes:eggplant:1.0.10"

  testCompile "junit:junit:4.+"
  testCompile "org.jboss.resteasy:resteasy-client:3.0.8.Final"
  testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"
  testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:$arquillianVersion"
  testCompile group: "org.jboss.shrinkwrap.resolver", name: "shrinkwrap-resolver-gradle-depchain", version: "2.2.0-alpha-2"
  testRuntime "org.wildfly:wildfly-arquillian-container-remote:$wildflyVersion"
}

sourceSets {
  def userProfileName

  if (project.hasProperty("profileName")) {
    userProfileName = "$profileName"
  } else {
    userProfileName = "main"
  }

  main {
    resources {
      srcDir file("src/$userProfileName/resources")
    }
    output.resourcesDir output.classesDir
  }

  integrationTest {
    java {
      srcDir 'src/integrationTest/java'
    }
    resources {
      srcDir 'src/integrationTest/resources'
    }
    compileClasspath += main.output + configurations.provided
    runtimeClasspath += main.output + configurations.provided
  }
}

task("release", type: War) {
  archiveName = "morecat.war"
  rootSpec.exclude("WEB-INF/morecat-ds.xml", "**/import.sql")
}

def generatedJavaSrcDir = "build/generated-sources/main/java"
sourceSets.main.java.srcDirs += [generatedJavaSrcDir]

task procJava(type: JavaCompile, group: "build", description: "Annotation processing") {
  def aptDestDir = new File(project.projectDir, generatedJavaSrcDir)
  source = project.sourceSets.main.java.srcDirs.findAll {
    !it.equals(aptDestDir)
  }

  classpath = project.configurations.compile
  options.compilerArgs.addAll "-proc:only", "-implicit:none",
    "-processorpath", project.configurations.apt.asPath
  destinationDir = aptDestDir
}
compileJava.dependsOn procJava

task integrationTest(type: Test)
tasks.withType(Test).matching({ t-> t.name.endsWith('Test') } as Spec).each { t ->
  t.testClassesDir = project.sourceSets.integrationTest.output.classesDir
  t.classpath = project.configurations.getByName(t.name + 'Runtime') +
    project.sourceSets.main.output +
    project.sourceSets.integrationTest.output
}

processResources {
  filter(ReplaceTokens, tokens: ["version": project.version])
}

task wrapper(type: Wrapper) {
  gradleVersion = expectedGradleVersion
}
