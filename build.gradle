import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'war'

apply plugin: 'findbugs'
apply plugin: 'jacoco'

apply from: 'generate-schema.gradle'
apply from: 'flyway.gradle'

version = '0.3.0-SNAPSHOT'

war.archiveName = 'morecat.war'

sourceCompatibility = targetCompatibility = 1.8

ext {
  wildflyVersion = '8.2.0.Final'
  resteasyVersion = '3.0.10.Final'
  hibernateVersion = '4.3.7.Final'
  hibernateValidatorVersion = '5.1.3.Final'
  keycloakVersion = '1.1.0.Beta2'
  arquillianVersion = '1.1.5.Final'
  expectedGradleVersion = '2.1'
}

tasks.withType(AbstractCompile) each {
  it.options.encoding = 'UTF-8'
}

repositories { 
  mavenCentral()
  maven { url 'http://repository.primefaces.org' }
  maven { url 'http://repo.jfrog.org/artifactory/repo' }
}

configurations {
  apt.description 'for annotation processors'
  provided
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  providedCompile 'javax:javaee-api:7.0'
  providedCompile "org.jboss.resteasy:resteasy-jackson-provider:$resteasyVersion"
  providedCompile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
  providedCompile "org.hibernate:hibernate-core:$hibernateVersion"
  apt "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"

  providedCompile "org.keycloak:keycloak-core:$keycloakVersion"
  providedCompile "org.keycloak:keycloak-adapter-core:$keycloakVersion"
  compile "org.keycloak:keycloak-installed-adapter:$keycloakVersion"

  providedCompile 'org.projectlombok:lombok:1.14.2'

  compile 'org.apache.commons:commons-lang3:3.3.2'
  providedCompile 'org.apache.httpcomponents:httpclient:4.2.1'
  compile 'am.ik.marked4j:marked4j:0.9.1'
  compile 'org.slf4j:slf4j-api:1.7.7'
  compile 'ch.qos.logback:logback-classic:1.1.2'
  compile 'org.primefaces:primefaces:5.1'
  compile 'org.primefaces.themes:eggplant:1.0.10'

  testCompile 'junit:junit:4.11'
  testCompile "org.jboss.resteasy:resteasy-client:$resteasyVersion"
  testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"
  testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:$arquillianVersion"
  testRuntime "org.wildfly:wildfly-arquillian-container-managed:$wildflyVersion"
  testCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.0-beta-1'
}

sourceSets {
  def userProfileName

  if (project.hasProperty('profileName')) {
    userProfileName = "$profileName"
  } else {
    userProfileName = 'main'
  }

  main {
    resources {
      srcDir file("src/$userProfileName/resources")
    }
    output.resourcesDir output.classesDir
  }

  integrationTest {
    java {
      srcDir 'src/integrationTest/java'
    }
    resources {
      srcDir 'src/integrationTest/resources'
    }
    compileClasspath += main.output + configurations.provided
    runtimeClasspath += main.output + configurations.provided
  }
}

task('release', type: War) {
  archiveName = 'morecat.war'
  rootSpec.exclude('WEB-INF/morecat-ds.xml', '**/import.sql')
}

def generatedJavaSrcDir = 'build/generated-sources/main/java'
sourceSets.main.java.srcDirs += [generatedJavaSrcDir]

task procJava(type: JavaCompile, group: 'build', description: 'Annotation processing') {
  def aptDestDir = new File(project.projectDir, generatedJavaSrcDir)
  source = project.sourceSets.main.java.srcDirs.findAll {
    !it.equals(aptDestDir)
  }

  classpath = project.configurations.compile
  options.compilerArgs.addAll '-proc:only', '-implicit:none',
    '-processorpath', project.configurations.apt.asPath
  destinationDir = aptDestDir
}
compileJava.dependsOn procJava

task createKeycloakConfiguration << {
  copy {
    from 'keycloak/keycloak.json.template'
    into 'src/main/webapp/WEB-INF'

    expand keycloakRealmPublicKey:"$keycloakRealmPublicKey",
      keycloakAuthServerUrl:"$keycloakAuthServerUrl",
      keycloakCredentialSecret:"$keycloakCredentialSecret"

    rename 'keycloak.json.template', 'keycloak.json'
  }
}

test {
  reports.html.destination = file("${reports.html.destination}/unit")
  reports.junitXml.destination = file("${reports.junitXml.destination}/unit")
}

task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  reports.html.destination = file("${reports.html.destination}/integration")
  reports.junitXml.destination = file("${reports.junitXml.destination}/integration")
}

processResources {
  filter(ReplaceTokens, tokens: ['version': project.version])
}

findbugs {
  ignoreFailures = true
}
